#!/usr/bin/env python

import xml.etree.ElementTree as ElementTree
import sys

include_read_midi_cc = False

if len(sys.argv) < 4:
    print ("Usage: {0} <filename> <instr_number> <midi_offset>".format(sys.argv[0]))
    exit(0)

filename = sys.argv[1]
instr_number = sys.argv[2]
midi_instr_number = int(instr_number) + 100
midi_offset = int(sys.argv[3])

if len(sys.argv) > 4:
    include_read_midi_cc = True

tree = ElementTree.parse(filename)
root = tree.getroot()

midi_values = []

for parameter in root.findall("Plugin/Info[Name='amsynth']/../Data/Parameter"):
    midi_value = {}
    for attribute in parameter:
        midi_value[attribute.tag.lower()] = attribute.text
    midi_values.append(midi_value)

midi_range = {
    "amp_attack": [ 0, 2.5 ],
    "amp_decay": [ 0, 2.5 ],
    "amp_sustain": [ 0, 1.0 ],
    "amp_release": [ 0, 2.5 ],
    "osc1_waveform": [ 0, 4.0 ],
    "osc1_pulsewidth": [ 0, 1.0 ],
    "osc2_waveform": [ 0, 4.0 ],
    "osc2_pulsewidth": [ 0, 1.0 ],
    "osc2_range": [ -3, 4 ],
    "osc2_pitch": [ -12, 12 ],
    "osc2_detune": [ -1, 1 ],
    "osc_mix": [ -1, 1 ],
    "osc_mix_mode": [ 0, 1 ],
    "portamento_time": [ 0, 1 ],
    "portamento_mode": [ 0, 1 ],
    "filter_attack": [ 0, 2.5 ],
    "filter_decay": [ 0, 2.5 ],
    "filter_sustain": [ 0, 1.0 ],
    "filter_release": [ 0, 2.5 ],
    "filter_resonance": [ 0, 0.97 ],
    "filter_env_amount": [ -16, 16 ],
    "filter_cutoff": [ -0.5, 1.5 ],
    "filter_type": [ 0, 4.0 ],
    "filter_kbd_track": [ 0, 1 ],
    "lfo_waveform": [ 0, 6.0 ],
    "lfo_freq": [ 0, 7.5 ],
    "freq_mod_osc": [ 0, 2.0 ],
    "freq_mod_amount": [ 0, 1.25992105 ],
    "filter_mod_amount": [ -1, 1 ],
    "amp_mod_amount": [ -1, 1 ],
    "reverb_wet": [ 0, 1 ],
    "reverb_roomsize": [ 0, 1 ],
    "reverb_width": [ 0, 1 ],
    "reverb_damp": [ 0, 1 ],
    "distortion_crunch": [0, 0.9],
    "keyboard_mode": [0, 2],
    "osc2_sync": [0, 1],
    "master_vol": [ 0, 1 ]
}

midi_names = {
    "amp_attack": "1_amp_attack",
    "amp_decay": "1_amp_decay",
    "amp_sustain": "1_amp_sustain",
    "amp_release": "1_amp_release",
    "osc1_waveform": "1_osc_waveform",
    "osc1_pulsewidth": "1_osc_pulsewidth",
    "osc2_waveform": "2_osc_waveform",
    "osc2_pulsewidth": "2_osc_pulsewidth",
    "osc2_range": "2_osc_range",
    "osc2_pitch": "2_osc_pitch",
    "osc2_detune": "2_osc_detune",
    "osc_mix": "1_osc_mix",
    "osc_mix_mode": "1_osc_mix_mode",
    "portamento_time": "1_portamento_time",
    "portamento_mode": "1_portamento_mode",
    "filter_attack": "1_filter_attack",
    "filter_decay": "1_filter_decay",
    "filter_sustain": "1_filter_sustain",
    "filter_release": "1_filter_release",
    "filter_resonance": "1_filter_resonance",
    "filter_env_amount": "1_filter_env_amount",
    "filter_cutoff": "1_filter_cutoff",
    "filter_type": "1_filter_type",
    "filter_kbd_track": "1_filter_kbd_track",
    "lfo_waveform": "1_lfo_waveform",
    "lfo_freq": "1_lfo_freq",
    "freq_mod_osc": ["1_freq_mod_osc", "2_freq_mod_osc"],
    "freq_mod_amount": ["1_freq_mod_amount", "2_freq_mod_amount"],
    "filter_mod_amount": "1_filter_mod_amount",
    "amp_mod_amount": "1_amp_mod_amount",
    "reverb_wet": "1_reverb_wet",
    "reverb_roomsize": "1_reverb_roomsize",
    "reverb_width": "1_reverb_width",
    "reverb_damp": "1_reverb_damp",
    "distortion_crunch": "1_distortion_crunch",
    "keyboard_mode": "1_keyboard_mode",
    "osc2_sync": ["1_osc_sync", "2_osc_sync"],
    "master_vol": "1_master_vol"
}

if include_read_midi_cc:
    print ('''
giInitMidi   = 0
                opcode ReadMidiCC, 0, Siiiii
Sname, imin, imax, ichannel, iindex, ivalue xin
if giInitMidi == 0 then
iValue          = (ivalue - imin) / (imax - imin)
iValue          max iValue, 0.0
iValue          min iValue, 1.0
                initc7 ichannel, iindex, iValue
                chnset ivalue, Sname
endif
kMidiValue      ctrl7 ichannel, iindex, imin, imax
                chnset kMidiValue, Sname
                endop
    ''')

print (f'''
giInitMidi   = 0

instr {midi_instr_number}
''')

for midi_value in midi_values:
    name = midi_value['symbol']
    midi_channel = int(midi_value.get('midichannel', 0)) + midi_offset
    midi_cc = midi_value.get('midicc', 127)
    value = midi_value['value']

    if name in midi_range:
        midi_min, midi_max = midi_range[name]        
        name = midi_names[name]
        if isinstance(name, list):
            names = name
        else:
            names = [name]
        for name in names:
            name_with_number = f"_{instr_number}_{name}"
            print (f'ReadMidiCC "{name_with_number}", {midi_min}, {midi_max}, {midi_channel}, {midi_cc}, {value}')

print (f'''
giInitMidi = 1
endin
schedule {midi_instr_number}, 0, -1
''')
